# -*- coding: utf-8 -*-
"""qVAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1phUba8YR1RcnwmhYNN56DydRxWuDtSew
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

def VaR(r, confidence, principal=1):

    alpha = 1 - confidence
    var_percentile = np.percentile(r, alpha * 100)
    VaR_value = abs(principal * var_percentile)
    return VaR_value

def percent_var(r, confidence):

    alpha = 1 - confidence
    plt.hist(r, bins=50, alpha=0.75)
    plt.xlabel('Returns')
    plt.ylabel('Frequency')
    plt.title(f'Returns Distribution and {confidence*100}% VaR')
    plt.axvline(np.percentile(r, alpha * 100), color='red', linestyle='dashed', linewidth=2, label='VaR Threshold')
    plt.legend()
    plt.show()

    return abs(np.percentile(r, alpha * 100))

returns = np.random.normal(0, 1, 10000)
print("97.72% percentile:", np.percentile(returns, 97.72))

r = np.random.normal(0.05, 0.03, 1000000)
probability2SD = norm.cdf(2)

my_confidence = probability2SD
my_percent_var = percent_var(r, my_confidence)
print(f"Computed VaR ({my_confidence*100:.2f}% confidence): {np.round(my_percent_var, 2)}")

principal_amount = 1000000  # Assume $1M investment
var_result = VaR(r, my_confidence, principal=principal_amount)
print(f"Absolute VaR for a ${principal_amount:,} investment at {my_confidence*100:.2f}% confidence: ${var_result:,.2f}")

