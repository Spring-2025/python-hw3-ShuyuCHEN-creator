# -*- coding: utf-8 -*-
"""qVAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1phUba8YR1RcnwmhYNN56DydRxWuDtSew
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

def VaR(r, confidence, principal=1):

    var_percentile = np.percentile(r, (1 - confidence) * 100)

    var_value = principal * abs(var_percentile)

    plt.hist(r, bins=50, alpha=0.75)
    plt.axvline(x=var_percentile, color='red', linestyle='--', label=f'VaR at {confidence*100}% confidence')
    plt.legend()
    plt.show()

    return var_value

def percent_var(r, confidence):

    plt.hist(r, bins=50, alpha=0.75)
    plt.show()

    out = np.percentile(r, (1 - confidence) * 100)
    return abs(out)

returns = np.random.normal(0, 1, 10000)
print(np.percentile(returns, 97.72))

#VaR test

r = np.random.normal(0.05, 0.03, 1000000)

probability2SD = 0.977249868

percent_var = VaR(r, probability2SD)

np.round(percent_var, 2) == 0.01

